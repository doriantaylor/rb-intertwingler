digraph {
    graph [bgcolor=transparent,rankdir=LR];
    // graph [rankdir=TB];
    node [shape=box,color="#777777",fontcolor="#777777",fontname="Lucida Grande, Lucida Sans Unicode, sans-serif"];
    edge [color="#777777",fontcolor="#777777",fontname="Lucida Grande, Lucida Sans Unicode, sans-serif"];

    subgraph multiples {
        node [shape=box3d];

        subgraph multihandlers {
            node [color="#5e8052",fontcolor="#5e8052"];
            Handler;
            Engine;
        }

        subgraph multiparam {
            node [color="#5a7a98",fontcolor="#5a7a98"];
            Parameter [label="Parameter\nTemplate"];
            P_Group [label="Parameter\nGroup"];
        }

        subgraph multitransform {
            node [color="#bc566e",fontcolor="#bc566e"];
            Queue [label="Transform\nQueue"];
            Entry [label="Transform\n(Metadata)"];
            Partial [label="Partial\nInvocation"];
        }

        Resource [style=dotted];
    }

    GraphDB [label="Graph\nDatabase", shape=cylinder];

    subgraph handlers {
        node [color="#5e8052",fontcolor="#5e8052"];
        Harness;
    }

    subgraph params {
        node [color="#5a7a98",fontcolor="#5a7a98"];
        P_Registry [label="Parameter\nRegistry"];
        P_Instance [label="Parameters\n(Instance)"];
    }

    subgraph transforms {
        node [color="#bc566e",fontcolor="#bc566e"];
        T_Harness [label="Transform\nHarness"];
        Chain [label="Queue\nChain"];
    }

    subgraph backrefs {
        edge [dir=both];

        Engine -> Dispatcher -> T_Harness -> Chain;
        T_Harness -> Queue;
        Engine -> P_Registry -> P_Group -> P_Instance;
        P_Registry -> Parameter;
    }

    subgraph ephemeral {
        edge [style=dotted];
        // T_Harness -> P_Registry;
        // Dispatcher -> P_Registry;
        // Queue -> Dispatcher -> Resolver;
        // T_Harness -> GraphDB;
        // P_Registry -> GraphDB;
        Entry -> Resource;
        Entry -> P_Group;
        // Handler -> GraphDB;
    }

    CLI -> Harness -> Engine -> Resolver -> GraphDB;
    Engine -> GraphDB;
    Dispatcher -> Handler -> Resource;
    Handler -> Engine;
    Queue -> Entry -> T_Harness;
    T_Harness -> P_Registry;
    Chain -> Queue -> Partial -> Entry;
    Partial -> P_Instance;
    P_Group -> Parameter;
}
